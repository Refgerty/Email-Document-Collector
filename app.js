// Email Document Collector - JavaScript —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å

// –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const appData = {
  emailAccounts: [
    {
      id: 1,
      email: "office@company.ru",
      provider: "Gmail",
      status: "–ê–∫—Ç–∏–≤–Ω—ã–π",
      last_sync: "2025-06-01 18:30:00",
      total_processed: 1247
    },
    {
      id: 2,
      email: "support@business.com",
      provider: "Outlook",
      status: "–ê–∫—Ç–∏–≤–Ω—ã–π", 
      last_sync: "2025-06-01 18:45:00",
      total_processed: 892
    },
    {
      id: 3,
      email: "hr@corporation.de",
      provider: "Yahoo",
      status: "–û—à–∏–±–∫–∞",
      last_sync: "2025-06-01 17:20:00",
      total_processed: 543
    }
  ],
  documentCategories: [
    {"name": "–°—á–µ—Ç–∞-—Ñ–∞–∫—Ç—É—Ä—ã", "count": 456, "icon": "üìÑ"},
    {"name": "–î–æ–≥–æ–≤–æ—Ä—ã", "count": 234, "icon": "üìã"},
    {"name": "–û—Ç—á—ë—Ç—ã", "count": 189, "icon": "üìä"},
    {"name": "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏", "count": 123, "icon": "üìë"},
    {"name": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "count": 567, "icon": "üñºÔ∏è"},
    {"name": "–ê—Ä—Ö–∏–≤—ã", "count": 89, "icon": "üì¶"},
    {"name": "–î—Ä—É–≥–∏–µ", "count": 156, "icon": "üìÅ"}
  ],
  recentDocuments: [
    {
      id: 1,
      filename: "–°—á—ë—Ç-—Ñ–∞–∫—Ç—É—Ä–∞_2025_001.pdf",
      sender: "accounting@supplier.com",
      received: "2025-06-01 18:35:00",
      size: "1.2 MB",
      category: "–°—á–µ—Ç–∞-—Ñ–∞–∫—Ç—É—Ä—ã",
      status: "–û–±—Ä–∞–±–æ—Ç–∞–Ω"
    },
    {
      id: 2,
      filename: "–î–æ–≥–æ–≤–æ—Ä_–∞—Ä–µ–Ω–¥—ã_–æ—Ñ–∏—Å–∞.docx",
      sender: "realty@office.com",
      received: "2025-06-01 18:20:00",
      size: "856 KB",
      category: "–î–æ–≥–æ–≤–æ—Ä—ã",
      status: "–û–±—Ä–∞–±–æ—Ç–∞–Ω"
    },
    {
      id: 3,
      filename: "–ú–µ—Å—è—á–Ω—ã–π_–æ—Ç—á—ë—Ç_–º–∞–π.xlsx",
      sender: "manager@department.ru",
      received: "2025-06-01 17:55:00",
      size: "2.4 MB",
      category: "–û—Ç—á—ë—Ç—ã",
      status: "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
    },
    {
      id: 4,
      filename: "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è_–ø—Ä–æ–µ–∫—Ç–∞.pptx",
      sender: "team@projects.com",
      received: "2025-06-01 17:30:00",
      size: "5.8 MB",
      category: "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏",
      status: "–û–±—Ä–∞–±–æ—Ç–∞–Ω"
    },
    {
      id: 5,
      filename: "–õ–æ–≥–æ—Ç–∏–ø_–∫–æ–º–ø–∞–Ω–∏–∏.png",
      sender: "design@creative.com",
      received: "2025-06-01 17:15:00",
      size: "234 KB",
      category: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
      status: "–û–±—Ä–∞–±–æ—Ç–∞–Ω"
    }
  ]
};

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
class EmailDocumentCollector {
  constructor() {
    this.currentSection = 'dashboard';
    this.uploadedFiles = [];
    this.init();
  }

  init() {
    this.setupNavigation();
    this.setupModal();
    this.setupUpload();
    this.setupSearch();
    this.setupNotifications();
    this.renderDashboard();
    this.renderAccounts();
    this.renderDocuments();
    this.renderCategories();
  }

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è
  setupNavigation() {
    const menuItems = document.querySelectorAll('.menu-item');
    const sections = document.querySelectorAll('.content-section');

    menuItems.forEach(item => {
      item.addEventListener('click', () => {
        const section = item.dataset.section;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        menuItems.forEach(mi => mi.classList.remove('active'));
        sections.forEach(s => s.classList.remove('active'));
        
        item.classList.add('active');
        document.getElementById(section).classList.add('active');
        
        this.currentSection = section;
        
        // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        item.style.transform = 'scale(1.05)';
        setTimeout(() => {
          item.style.transform = '';
        }, 200);
      });
    });
  }

  // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
  setupModal() {
    const addAccountBtn = document.getElementById('addAccountBtn');
    const modal = document.getElementById('addAccountModal');
    const closeModal = document.getElementById('closeModal');
    const cancelModal = document.getElementById('cancelModal');
    const addAccountForm = document.getElementById('addAccountForm');

    addAccountBtn.addEventListener('click', () => {
      modal.classList.add('show');
    });

    const closeModalHandler = () => {
      modal.classList.remove('show');
    };

    closeModal.addEventListener('click', closeModalHandler);
    cancelModal.addEventListener('click', closeModalHandler);

    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        closeModalHandler();
      }
    });

    addAccountForm.addEventListener('submit', (e) => {
      e.preventDefault();
      const formData = new FormData(addAccountForm);
      const email = formData.get('email') || addAccountForm.querySelector('input[type="email"]').value;
      
      this.addEmailAccount(email);
      this.showNotification('–£—Å–ø–µ—Ö', `Email-–∞–∫–∫–∞—É–Ω—Ç ${email} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω`, 'success');
      closeModalHandler();
      addAccountForm.reset();
    });
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
  setupUpload() {
    const uploadArea = document.getElementById('uploadArea');
    const fileInput = document.getElementById('fileInput');
    const uploadQueue = document.getElementById('uploadQueue');
    const uploadList = document.getElementById('uploadList');

    // –ö–ª–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
    uploadArea.addEventListener('click', () => {
      fileInput.click();
    });

    // Drag & Drop
    uploadArea.addEventListener('dragover', (e) => {
      e.preventDefault();
      uploadArea.classList.add('drag-over');
    });

    uploadArea.addEventListener('dragleave', () => {
      uploadArea.classList.remove('drag-over');
    });

    uploadArea.addEventListener('drop', (e) => {
      e.preventDefault();
      uploadArea.classList.remove('drag-over');
      const files = e.dataTransfer.files;
      this.handleFiles(files);
    });

    fileInput.addEventListener('change', (e) => {
      this.handleFiles(e.target.files);
    });
  }

  handleFiles(files) {
    const uploadQueue = document.getElementById('uploadQueue');
    const uploadList = document.getElementById('uploadList');
    
    if (files.length > 0) {
      uploadQueue.style.display = 'block';
    }

    Array.from(files).forEach(file => {
      const uploadItem = this.createUploadItem(file);
      uploadList.appendChild(uploadItem);
      this.simulateUpload(uploadItem, file);
    });
  }

  createUploadItem(file) {
    const item = document.createElement('div');
    item.className = 'upload-item';
    
    item.innerHTML = `
      <div class="upload-item-info">
        <div class="upload-item-name">${file.name}</div>
        <div class="upload-item-size">${this.formatFileSize(file.size)}</div>
      </div>
      <div class="upload-progress">
        <div class="upload-progress-bar" style="width: 0%"></div>
      </div>
      <div class="upload-status">0%</div>
    `;
    
    return item;
  }

  simulateUpload(uploadItem, file) {
    const progressBar = uploadItem.querySelector('.upload-progress-bar');
    const statusText = uploadItem.querySelector('.upload-status');
    let progress = 0;

    const interval = setInterval(() => {
      progress += Math.random() * 15;
      if (progress >= 100) {
        progress = 100;
        clearInterval(interval);
        statusText.textContent = '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
        this.showNotification('–ó–∞–≥—Ä—É–∑–∫–∞', `–§–∞–π–ª ${file.name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω`, 'success');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        this.addDocument(file);
      } else {
        statusText.textContent = Math.round(progress) + '%';
      }
      
      progressBar.style.width = progress + '%';
    }, 100 + Math.random() * 200);
  }

  // –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
  setupSearch() {
    const searchInput = document.getElementById('searchInput');
    const categoryFilter = document.getElementById('categoryFilter');

    if (searchInput) {
      searchInput.addEventListener('input', () => {
        this.filterDocuments();
      });
    }

    if (categoryFilter) {
      categoryFilter.addEventListener('change', () => {
        this.filterDocuments();
      });

      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
      appData.documentCategories.forEach(category => {
        const option = document.createElement('option');
        option.value = category.name;
        option.textContent = category.name;
        categoryFilter.appendChild(option);
      });
    }
  }

  filterDocuments() {
    const searchTerm = document.getElementById('searchInput')?.value.toLowerCase() || '';
    const selectedCategory = document.getElementById('categoryFilter')?.value || '';
    
    const rows = document.querySelectorAll('#documentsTableBody tr');
    
    rows.forEach(row => {
      const filename = row.querySelector('.document-filename')?.textContent.toLowerCase() || '';
      const category = row.cells[4]?.textContent || '';
      
      const matchesSearch = filename.includes(searchTerm);
      const matchesCategory = !selectedCategory || category === selectedCategory;
      
      if (matchesSearch && matchesCategory) {
        row.style.display = '';
      } else {
        row.style.display = 'none';
      }
    });
  }

  // –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  setupNotifications() {
    this.notificationContainer = document.getElementById('notifications');
  }

  showNotification(title, message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    
    notification.innerHTML = `
      <div class="notification-content">
        <div class="notification-text">
          <div class="notification-title">${title}</div>
          <div class="notification-message">${message}</div>
        </div>
        <button class="notification-close">&times;</button>
      </div>
    `;
    
    this.notificationContainer.appendChild(notification);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    setTimeout(() => {
      notification.classList.add('show');
    }, 100);
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const closeBtn = notification.querySelector('.notification-close');
    closeBtn.addEventListener('click', () => {
      this.closeNotification(notification);
    });
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      this.closeNotification(notification);
    }, 5000);
  }

  closeNotification(notification) {
    notification.classList.remove('show');
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 300);
  }

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–∞—à–±–æ—Ä–¥–∞
  renderDashboard() {
    this.renderDashboardDocuments();
    this.renderDashboardCategories();
  }

  renderDashboardDocuments() {
    const container = document.getElementById('dashboardDocuments');
    if (!container) return;

    const recentDocs = appData.recentDocuments.slice(0, 5);
    
    container.innerHTML = recentDocs.map(doc => `
      <div class="recent-document-item">
        <div class="recent-document-info">
          <div class="recent-document-name">${doc.filename}</div>
          <div class="recent-document-meta">${doc.sender} ‚Ä¢ ${this.formatDate(doc.received)}</div>
        </div>
        <div class="document-status ${this.getStatusClass(doc.status)}">${doc.status}</div>
      </div>
    `).join('');
  }

  renderDashboardCategories() {
    const container = document.getElementById('dashboardCategories');
    if (!container) return;

    const topCategories = appData.documentCategories
      .sort((a, b) => b.count - a.count)
      .slice(0, 5);
    
    container.innerHTML = topCategories.map(category => `
      <div class="category-stat-item">
        <div class="category-stat-name">${category.icon} ${category.name}</div>
        <div class="category-stat-count">${category.count}</div>
      </div>
    `).join('');
  }

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
  renderAccounts() {
    const container = document.getElementById('accountsGrid');
    if (!container) return;

    container.innerHTML = appData.emailAccounts.map(account => `
      <div class="account-card">
        <div class="account-header">
          <div class="account-email">${account.email}</div>
          <div class="account-status ${account.status === '–ê–∫—Ç–∏–≤–Ω—ã–π' ? 'active' : 'error'}">${account.status}</div>
        </div>
        <div class="account-details">
          <div class="account-detail">
            <div class="account-detail-value">${account.provider}</div>
            <div class="account-detail-label">–ü—Ä–æ–≤–∞–π–¥–µ—Ä</div>
          </div>
          <div class="account-detail">
            <div class="account-detail-value">${account.total_processed}</div>
            <div class="account-detail-label">–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ</div>
          </div>
          <div class="account-detail">
            <div class="account-detail-value">${this.formatDate(account.last_sync)}</div>
            <div class="account-detail-label">–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è</div>
          </div>
        </div>
      </div>
    `).join('');
  }

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  renderCategories() {
    const container = document.getElementById('categoriesGrid');
    if (!container) return;

    container.innerHTML = appData.documentCategories.map(category => `
      <div class="category-card" data-category="${category.name}">
        <div class="category-icon">${category.icon}</div>
        <div class="category-name">${category.name}</div>
        <div class="category-count">${category.count}</div>
      </div>
    `).join('');

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    container.querySelectorAll('.category-card').forEach(card => {
      card.addEventListener('click', () => {
        const category = card.dataset.category;
        const categoryFilter = document.getElementById('categoryFilter');
        if (categoryFilter) {
          categoryFilter.value = category;
          this.filterDocuments();
        }
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∫–ª–∏–∫–∞
        card.style.transform = 'scale(0.95)';
        setTimeout(() => {
          card.style.transform = '';
        }, 150);
      });
    });
  }

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  renderDocuments() {
    const container = document.getElementById('documentsTableBody');
    if (!container) return;

    container.innerHTML = appData.recentDocuments.map(doc => `
      <tr>
        <td><span class="document-filename">${doc.filename}</span></td>
        <td>${doc.sender}</td>
        <td>${this.formatDate(doc.received)}</td>
        <td>${doc.size}</td>
        <td>${doc.category}</td>
        <td><span class="document-status ${this.getStatusClass(doc.status)}">${doc.status}</span></td>
      </tr>
    `).join('');
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
  addEmailAccount(email) {
    const newAccount = {
      id: appData.emailAccounts.length + 1,
      email: email,
      provider: this.detectProvider(email),
      status: '–ê–∫—Ç–∏–≤–Ω—ã–π',
      last_sync: new Date().toISOString().slice(0, 19).replace('T', ' '),
      total_processed: 0
    };

    appData.emailAccounts.push(newAccount);
    this.renderAccounts();
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
  addDocument(file) {
    const newDoc = {
      id: appData.recentDocuments.length + 1,
      filename: file.name,
      sender: 'upload@system.local',
      received: new Date().toISOString().slice(0, 19).replace('T', ' '),
      size: this.formatFileSize(file.size),
      category: this.detectCategory(file.name),
      status: '–û–±—Ä–∞–±–æ—Ç–∞–Ω'
    };

    appData.recentDocuments.unshift(newDoc);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ 50 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    if (appData.recentDocuments.length > 50) {
      appData.recentDocuments = appData.recentDocuments.slice(0, 50);
    }

    this.renderDocuments();
    this.renderDashboard();
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  detectProvider(email) {
    const domain = email.split('@')[1]?.toLowerCase();
    if (domain?.includes('gmail')) return 'Gmail';
    if (domain?.includes('outlook') || domain?.includes('hotmail')) return 'Outlook';
    if (domain?.includes('yahoo')) return 'Yahoo';
    return '–î—Ä—É–≥–æ–π';
  }

  detectCategory(filename) {
    const name = filename.toLowerCase();
    if (name.includes('—Å—á–µ—Ç') || name.includes('invoice')) return '–°—á–µ—Ç–∞-—Ñ–∞–∫—Ç—É—Ä—ã';
    if (name.includes('–¥–æ–≥–æ–≤–æ—Ä') || name.includes('contract')) return '–î–æ–≥–æ–≤–æ—Ä—ã';
    if (name.includes('–æ—Ç—á–µ—Ç') || name.includes('report')) return '–û—Ç—á—ë—Ç—ã';
    if (name.includes('–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è') || name.includes('presentation') || name.includes('.ppt')) return '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏';
    if (name.includes('.png') || name.includes('.jpg') || name.includes('.jpeg') || name.includes('.gif')) return '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è';
    if (name.includes('.zip') || name.includes('.rar') || name.includes('.7z')) return '–ê—Ä—Ö–∏–≤—ã';
    return '–î—Ä—É–≥–∏–µ';
  }

  formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  formatDate(dateString) {
    const date = new Date(dateString);
    const now = new Date();
    const diff = now - date;
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const minutes = Math.floor(diff / (1000 * 60));

    if (minutes < 60) return `${minutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    if (hours < 24) return `${hours} —á –Ω–∞–∑–∞–¥`;
    if (days < 7) return `${days} –¥–Ω –Ω–∞–∑–∞–¥`;
    
    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  }

  getStatusClass(status) {
    switch (status) {
      case '–û–±—Ä–∞–±–æ—Ç–∞–Ω': return 'processed';
      case '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ': return 'processing';
      case '–û—à–∏–±–∫–∞': return 'error';
      default: return 'processed';
    }
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
  const app = new EmailDocumentCollector();
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  setTimeout(() => {
    app.showNotification(
      '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', 
      'Email Document Collector –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ', 
      'success'
    );
  }, 1000);

  // –°–∏–º—É–ª—è—Ü–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  setInterval(() => {
    if (Math.random() < 0.1) { // 10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
      const messages = [
        '–ù–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
        '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è email –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
        '–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ'
      ];
      const message = messages[Math.floor(Math.random() * messages.length)];
      app.showNotification('–°–∏—Å—Ç–µ–º–∞', message, 'info');
    }
  }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
});